{"version":3,"file":"index.umd.js","sources":["../src/entity.js","../src/acceptors.js"],"sourcesContent":["/*\n\nEntityManager 类，用于生成一个通用的管理Entity的类。\n */\n\nimport { useCollection } from 'mongo-use-collection';\n// import { ObjectId } from 'mongodb';\n\nexport default class EntityManager {\n  /**\n   * 构造函数\n   * @param  {String} collectionName Entity使用的集合的名称\n   * @param  {String} mongoUrl       所使用的数据库的连接字符串\n   */\n  constructor(collectionName, mongoUrl) {\n    this.collectionName = collectionName;\n    this.mongoUrl = mongoUrl;\n    this.useEntity = cb => useCollection(mongoUrl, collectionName, cb);\n  }\n\n  /**\n   *\n   * 插入实体对象到数据库中\n   * @param  {Object} entityData 实体对象数据\n   * @return {Promise}            操作结果\n   */\n  insert(entityData) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        result = await col.insertOne(entityData);\n        resolve(result);\n      } catch (e) {\n        console.log('EntityManager Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n/**\n * 查询实体对象\n * @param  {Object} query =             {}  查询条件\n * @param  {Number} limit =             100 查询结果限制\n * @param  {number} skip  =             0   跳过开头的结果\n * @return {Promise}       操作结果\n */\n  find({ query = {}, limit = 100, skip = 0 }) {\n    console.log('[EntityManager find]query::', JSON.stringify(query));\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        const cursor = col.find(query).skip(skip).limit(limit);\n        result = await cursor.toArray();\n        console.log('[EntityManager find]', col.collectionName, '::result.length::', result.length);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager find]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  count(query = {}) {\n    console.log('[EntityManager count]query::', JSON.stringify(query));\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.count(query);\n        console.log('[EntityManager count]result::', result);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager count]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  findById(_id) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.findOne({ _id });\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager findById]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n  removeById(_id) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        await col.remove({ _id }, { single: true });\n        resolve();\n      } catch (e) {\n        console.log('[EntityManager findById]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  updateById({ _id, ...other }) {\n    return this.update({ _id }, { $set: other });\n  }\n\n  update(condition, updateQuery, options = {}) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.update(condition, updateQuery, options);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager update]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n}\n","/*\neslint-disable no-underscore-dangle\n */\nimport { useCollection } from 'mongo-use-collection';\nimport { ObjectId } from 'mongodb';\nimport EntityManager from './entity';\n\nconst { all } = Promise;\n\nexport const ACCEPTORS_COLLECTION = 'acceptors';\nexport const STAT_BY_PROJECT = 'stat_by_project';\nexport const STAT_BY_YEAR = 'stat_by_year';\nexport default class AcceptorManager extends EntityManager {\n  constructor(mongoUrl, collectionName = ACCEPTORS_COLLECTION) {\n    super(collectionName, mongoUrl);\n  }\n  async insert({ idCard: { type, number }, ...other }) {\n    if (!type || !number) {\n      return Promise.reject('证件类型和号码不能为空');\n    }\n    try {\n      const result = await super.insert({ idCard: { type, number }, ...other });\n      return Promise.resolve(result.insertedId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  updateById(acceptor) {\n    // _id, eduHistory, careerHistory, records 这几个字段不能更新\n    const { eduHistory, careerHistory, records, // eslint-disable-line no-unused-vars\n      ...other } = acceptor;\n    return super.updateById(other);\n  }\n  addEdu(_id, { name, year, ...other }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    return super.update({ _id }, { $addToSet: {\n      eduHistory: { name, year, ...other },\n    } });\n  }\n  async removeEdu(_id, { name, year }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    try {\n      const oldDoc = await super.findById(_id);\n      const filtered = oldDoc.eduHistory.filter(edu =>\n        !(edu.name === name && edu.year === year));\n      await super.update({ _id }, {\n        $set: {\n          eduHistory: filtered,\n        },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  addCareer(_id, { name, year, ...other }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    return super.update({ _id }, { $addToSet: {\n      careerHistory: { name, year, ...other },\n    } });\n  }\n  async removeCareer(_id, { name, year }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    try {\n      const oldDoc = await super.findById(_id);\n      const filtered = oldDoc.careerHistory.filter(car =>\n        !(car.name === name && car.year === year));\n      await super.update({ _id }, {\n        $set: {\n          careerHistory: filtered,\n        },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async addRecord(_id, { id, project, amount, date, ...other }) {\n    if (!project || !amount || !date) return Promise.reject('project、amount和date不能为空');\n    if (!Number.isInteger(amount)) return Promise.reject('amount必须是整数');\n    if (!date.getFullYear) return Promise.reject('date必须是Date类型');\n    if (!id) id = new ObjectId(); // eslint-disable-line no-param-reassign\n    try {\n      await super.update({ _id }, {\n        $addToSet: {\n          records: {\n            _id: id,\n            project,\n            amount,\n            date,\n            ...other,\n          },\n        },\n      });\n      return Promise.resolve(id);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async removeRecord(_id, recordId) {\n    try {\n      const oldDoc = await super.findById(_id);\n      const records = oldDoc.records.filter(record => !record._id.equals(recordId));\n      await super.update({ _id }, {\n        $set: { records },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  async list({ text, skip = 0, limit = 100, fieldsForFilter = ['name', 'phone'] } = {\n    skip: 0, limit: 100, fieldsForFilter: ['name', 'phone']\n  }) {\n    let query = {};\n    if (text) {\n      if (!fieldsForFilter || !fieldsForFilter.length) {\n        return Promise.reject('当text有值时，fieldsForFilter字段不能为空');\n      }\n      const reg = new RegExp(text);\n      query = Object.assign(query, {\n        $or: fieldsForFilter.map(field => ({ [field]: reg })),\n      });\n    }\n    try {\n      const result = await Promise.all([\n        super.count(query),\n        super.find({ query, skip, limit }),\n      ]);\n      return Promise.resolve({\n        totalCount: result[0],\n        data: result[1],\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async listByRecord({ project, year, text,\n    skip = 0, limit = 100, fieldsForFilter = ['name', 'phone'] } = {}) {\n    let query = {};\n    if (text) {\n      if (!fieldsForFilter || !fieldsForFilter.length) {\n        return Promise.reject('当text有值时，fieldsForFilter字段不能为空');\n      }\n      const reg = new RegExp(text);\n      query = Object.assign(query, {\n        $or: fieldsForFilter.map(field => ({ [field]: reg })),\n      });\n    }\n    if (project) {\n      query = Object.assign(query, {\n        'records.project': project,\n      });\n    }\n\n    if (year) {\n      query = Object.assign(query, {\n        records: {\n          $elemMatch: {\n            date: {\n              $gte: new Date(year, 0, 1),\n              $lt: new Date(year + 1, 0, 1),\n            },\n          },\n        },\n      });\n    }\n    try {\n      const result = await Promise.all([\n        super.count(query),\n        super.find({ query, skip, limit }),\n      ]);\n      return Promise.resolve({\n        totalCount: result[0],\n        data: result[1],\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}\n\nexport const useAcceptors = cb => useCollection(mongoUrl, ACCEPTORS_COLLECTION, cb);\nexport const useStatByProject = cb => useCollection(mongoUrl, STAT_BY_PROJECT, cb);\nexport const useStatByYear = cb => useCollection(mongoUrl, STAT_BY_YEAR, cb);\nconst useProfiles = cb => useCollection(mongoUrl, profileCollection, cb);\n\nexport const computeStatByProject = async () =>\n  new Promise((resolve, reject) => useAcceptors(async col => {\n    const map = function () { // eslint-disable-line\n      if (this.records) {\n        this.records.forEach(function (record) { // eslint-disable-line\n          if (record.isDeleted) return;\n          emit(record.project, { // eslint-disable-line\n            amount: record.amount / 1000,\n            count: 1,\n            lastUpdated: record.date,\n          });\n        });\n      }\n    };\n    const reduce = function (key, values) { // eslint-disable-line\n      var amount = 0, count = 0, lastUpdated = 0; // eslint-disable-line\n      values.forEach(val => {\n        amount += val.amount;\n        count += val.count;\n        lastUpdated = Math.max(lastUpdated, +val.lastUpdated);\n      });\n      // mongodb 中不支持shorthand\n      return {\n        amount: amount, // eslint-disable-line object-shorthand\n        count: count, // eslint-disable-line object-shorthand\n        lastUpdated: lastUpdated, // eslint-disable-line object-shorthand\n      };\n    };\n\n    try {\n      await col.mapReduce(map, reduce, {\n        out: {\n          replace: STAT_BY_PROJECT,\n        },\n      });\n      resolve();\n    } catch (e) {\n      reject(e);\n    }\n  }));\n\nexport const computeStatByYear = async () =>\n  new Promise((resolve, reject) => {\n    useAcceptors(async col => {\n      const map = function () { // eslint-disable-line\n        if (this.records) {\n          this.records.forEach(function (record) { // eslint-disable-line\n            if (record.isDeleted) return;\n            emit(record.date.getYear() + 1900, { // eslint-disable-line\n              amount: record.amount / 1000,\n              count: 1,\n              lastUpdated: record.date,\n            });\n          });\n        }\n      };\n      const reduce = function (key, values) { // eslint-disable-line\n        var amount = 0, count = 0, lastUpdated = 0; // eslint-disable-line\n        values.forEach((val) => {\n          amount += val.amount;\n          count += val.count;\n          lastUpdated = Math.max(lastUpdated, +val.lastUpdated);\n        });\n        // mongodb 中不支持shorthand\n        return {\n          amount: amount, // eslint-disable-line object-shorthand\n          count: count, // eslint-disable-line object-shorthand\n          lastUpdated: lastUpdated, // eslint-disable-line object-shorthand\n        };\n      };\n      try {\n        await col.mapReduce(map, reduce, {\n          out: {\n            replace: STAT_BY_YEAR,\n          },\n        });\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  });\n\nexport const getStatByProject = () =>\n  new Promise(resolve => {\n    useStatByProject(async col => {\n      const result = await col.find().toArray();\n      resolve(result);\n    });\n  });\n\nexport const getStatByYear = () =>\n  new Promise(resolve => {\n    useStatByYear(async col => {\n      const result = await col.find().toArray();\n      resolve(result);\n    });\n  });\n\nexport const findAcceptors = async ({ text, year, project, projections, skip = 0, limit = 20 } = {}) => {\n  showLog && console.time('findAcceptors from Profiles');\n  let condition = { isAcceptor: true };\n  if (text) {\n    const reg = new RegExp(text);\n    condition = Object.assign(condition, {\n      $or: [{ name: reg }, { phone: reg }],\n    });\n  }\n  if (project) {\n    condition = Object.assign(condition, {\n      'records.project': project,\n    });\n  }\n\n  if (year) {\n    year = parseInt(year, 10); // eslint-disable-line\n    condition = Object.assign(condition, {\n      records: {\n        $elemMatch: {\n          date: {\n            $gte: new Date(year, 0, 1),\n            $lt: new Date(year + 1, 0, 1),\n          },\n        },\n      },\n    });\n  }\n\n  const { find, count } = profileManager;\n  try {\n    const result = await all([count(condition), find(condition)]);\n    console.log('result::::::::', result);\n    return Promise.resolve({\n      totalCount: result[0],\n      data: result[1],\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\n/*\n通过idCard.number找到相应的acceptor\n */\nexport const findByIdCardNumber = async idCardNumber =>\n  new Promise((resolve, reject) => {\n    useAcceptors(async col => {\n      try {\n        const doc = await col.findOne({ 'idCard.number': idCardNumber });\n        resolve(doc);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  });\n\n/*\n将数据标记为已删除（isDeleted)\n */\nexport const trash = _id => new Promise((resolve, reject) =>\n  useAcceptors(async col => {\n    try {\n      const result = await col.updateOne({ _id }, {\n        $set: { isDeleted: true },\n      });\n      resolve(result);\n    } catch (e) {\n      reject(e);\n    }\n  }));\n\nexport const remove = async _id =>\n  new Promise((resolve, reject) => useAcceptors(async col => {\n    try {\n      resolve(await col.remove({ _id }));\n    } catch (e) {\n      reject(e);\n    }\n  }));\n"],"names":["EntityManager","collectionName","mongoUrl","useEntity","useCollection","cb","entityData","resolve","reject","col","result","insertOne","console","log","query","limit","skip","cursor","find","toArray","length","count","_id","findOne","remove","single","other","update","$set","condition","updateQuery","options","all","ACCEPTORS_COLLECTION","STAT_BY_PROJECT","STAT_BY_YEAR","AcceptorManager","idCard","type","number","insertedId","acceptor","eduHistory","careerHistory","records","name","year","$addToSet","oldDoc","filtered","filter","edu","car","id","project","amount","date","getFullYear","ObjectId","recordId","record","equals","fieldsForFilter","text","reg","RegExp","$or","map","field","totalCount","data","$elemMatch","$gte","Date","$lt","useAcceptors","computeStatByProject","forEach","isDeleted","emit","lastUpdated","reduce","key","values","val","Math","max","mapReduce","out","replace","computeStatByYear","getYear","findAcceptors","projections","showLog","time","isAcceptor","phone","parseInt","profileManager","findByIdCardNumber","idCardNumber","doc"],"mappings":"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"}
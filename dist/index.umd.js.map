{"version":3,"file":"index.umd.js","sources":["../src/entity.js","../src/acceptors.js"],"sourcesContent":["/*\nEntityManager 类，用于生成一个通用的管理Entity的类。\n */\n/*\neslint-disable no-console\n */\nimport { useCollection } from 'mongo-use-collection'; // eslint-disable-line import/no-unresolved\n// import { ObjectId } from 'mongodb';\n\nexport default class EntityManager {\n  /**\n   * 构造函数\n   * @param  {String} collectionName Entity使用的集合的名称\n   * @param  {String} mongoUrl       所使用的数据库的连接字符串\n   */\n  constructor(mongoUrl, collectionName) {\n    this.collectionName = collectionName;\n    this.mongoUrl = mongoUrl;\n    this.useEntity = cb => useCollection(mongoUrl, collectionName, cb);\n  }\n\n  /**\n   *\n   * 插入实体对象到数据库中\n   * @param  {Object} entityData 实体对象数据\n   * @return {Promise}            操作结果\n   */\n  insert(entityData) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        result = await col.insertOne(entityData);\n        resolve(result);\n      } catch (e) {\n        console.log('EntityManager Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n/**\n * 查询实体对象\n * @param  {Object} query =             {}  查询条件\n * @param  {Number} limit =             100 查询结果限制\n * @param  {number} skip  =             0   跳过开头的结果\n * @return {Promise}       操作结果\n */\n  find({ query = {}, limit = 100, skip = 0 } = { query: {}, limit: 100, skip: 0 }) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        console.log(`[EntityManager find][${col.collectionName}]query::`, JSON.stringify(query));\n        const cursor = col.find(query).skip(skip).limit(limit);\n        result = await cursor.toArray();\n        console.log('[EntityManager find]', col.collectionName, '::result.length::', result.length);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager find]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  count(query = {}) {\n    console.log('[EntityManager count]query::', JSON.stringify(query));\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.count(query);\n        console.log('[EntityManager count]result::', result);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager count]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  findOne(query = {}) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.findOne(query);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager findOne]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  findById(_id) {\n    return this.findOne({ _id });\n  }\n\n  removeById(_id) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        await col.remove({ _id }, { single: true });\n        resolve();\n      } catch (e) {\n        console.log('[EntityManager findById]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  updateById({ _id, ...other }) {\n    return this.update({ _id }, { $set: other });\n  }\n\n  update(condition, updateQuery, options = {}) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.update(condition, updateQuery, options);\n        resolve(result);\n      } catch (error) {\n        reject({\n          error,\n          condition,\n          updateQuery,\n          options,\n        });\n      }\n    }));\n  }\n\n  mapReduce(map, reduce, options) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.mapReduce(map, reduce, options);\n        resolve(result);\n      } catch (e) {\n        reject(e);\n      }\n    }));\n  }\n}\n","/*\neslint-disable no-underscore-dangle\n */\nimport { ObjectId } from 'mongodb';\nimport EntityManager from './entity';\n\nexport const ACCEPTORS_COLLECTION = 'acceptors';\nexport const STAT_BY_PROJECT = 'stat_by_project';\nexport const STAT_BY_YEAR = 'stat_by_year';\nexport default class AcceptorManager extends EntityManager {\n  constructor(mongoUrl, collectionName = ACCEPTORS_COLLECTION) {\n    super(mongoUrl, collectionName);\n    this.statByProjectCollectionName = `${collectionName}.${STAT_BY_PROJECT}`;\n    this.statByYearCollectionName = `${collectionName}.${STAT_BY_YEAR}`;\n  }\n  async insert({ idCard: { type, number }, ...other }) {\n    if (!type || !number) {\n      return Promise.reject('证件类型和号码不能为空');\n    }\n    try {\n      const result = await super.insert({ idCard: { type, number }, ...other });\n      return Promise.resolve(result.insertedId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  updateById(acceptor) {\n    // _id, eduHistory, careerHistory, records 这几个字段不能更新\n    const { eduHistory, careerHistory, records, // eslint-disable-line no-unused-vars\n      ...other } = acceptor;\n    return super.updateById(other);\n  }\n  addEdu(_id, { name, year, ...other }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    return super.update({ _id }, { $addToSet: {\n      eduHistory: { name, year, ...other },\n    } });\n  }\n  async removeEdu(_id, { name, year }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    try {\n      const oldDoc = await super.findById(_id);\n      const filtered = oldDoc.eduHistory.filter(edu =>\n        !(edu.name === name && edu.year === year));\n      await super.update({ _id }, {\n        $set: {\n          eduHistory: filtered,\n        },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  addCareer(_id, { name, year, ...other }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    return super.update({ _id }, { $addToSet: {\n      careerHistory: { name, year, ...other },\n    } });\n  }\n  async removeCareer(_id, { name, year }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    try {\n      const oldDoc = await super.findById(_id);\n      const filtered = oldDoc.careerHistory.filter(car =>\n        !(car.name === name && car.year === year));\n      await super.update({ _id }, {\n        $set: {\n          careerHistory: filtered,\n        },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async addRecord(id, { _id, project, amount, date, ...other }) {\n    if (!project || !amount || !date) return Promise.reject('project、amount和date不能为空');\n    if (!Number.isInteger(amount)) return Promise.reject('amount必须是整数');\n    if (!date.getFullYear) return Promise.reject('date必须是Date类型');\n    if (!_id) _id = new ObjectId(); // eslint-disable-line\n    try {\n      await super.update({ _id: id }, {\n        $addToSet: {\n          records: {\n            _id,\n            project,\n            amount,\n            date,\n            ...other,\n          },\n        },\n      });\n      return Promise.resolve(_id); // eslint-disable-line\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async removeRecord(_id, recordId) {\n    try {\n      const oldDoc = await super.findById(_id);\n      const records = oldDoc.records.filter(record => !record._id.equals(recordId));\n      await super.update({ _id }, {\n        $set: { records },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  findOneByIdCardNumber(number) {\n    return super.findOne({ 'idCard.number': number });\n  }\n\n  async list({ text, skip = 0, limit = 100, fieldsForFilter = ['name', 'phone'] } = {\n    skip: 0, limit: 100, fieldsForFilter: ['name', 'phone'],\n  }) {\n    let query = {};\n    if (text) {\n      if (!fieldsForFilter || !fieldsForFilter.length) {\n        return Promise.reject('当text有值时，fieldsForFilter字段不能为空');\n      }\n      const reg = new RegExp(text);\n      query = Object.assign(query, {\n        $or: fieldsForFilter.map(field => ({ [field]: reg })),\n      });\n    }\n    try {\n      const result = await Promise.all([\n        super.count(query),\n        super.find({ query, skip, limit }),\n      ]);\n      return Promise.resolve({\n        totalCount: result[0],\n        data: result[1],\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  async listByRecord({ project, year, text,\n    skip = 0, limit = 100, fieldsForFilter = ['name', 'phone'] } = {}) {\n    let query = {};\n    if (text) {\n      if (!fieldsForFilter || !fieldsForFilter.length) {\n        return Promise.reject('当text有值时，fieldsForFilter字段不能为空');\n      }\n      const reg = new RegExp(text);\n      query = Object.assign(query, {\n        $or: fieldsForFilter.map(field => ({ [field]: reg })),\n      });\n    }\n    if (project) {\n      query = Object.assign(query, {\n        'records.project': project,\n      });\n    }\n\n    if (year) {\n      year = parseInt(year, 10);\n      query = Object.assign(query, {\n        records: {\n          $elemMatch: {\n            date: {\n              $gte: new Date(year, 0, 1),\n              $lt: new Date(++year, 0, 1),\n            },\n          },\n        },\n      });\n    }\n    try {\n      const result = await Promise.all([\n        super.count(query),\n        super.find({ query, skip, limit }),\n      ]);\n      return Promise.resolve({\n        totalCount: result[0],\n        data: result[1],\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  computeStatByProject() {\n    const map = function () { // eslint-disable-line\n      if (this.records) {\n        this.records.forEach(record => {\n          if (record.isDeleted) return;\n          emit(record.project, { // eslint-disable-line\n            amount: record.amount / 1000,\n            count: 1,\n            lastUpdated: record.date,\n          });\n        });\n      }\n    };\n    const reduce = (key, values) => {\n      let amount = 0;\n      let count = 0;\n      let lastUpdated = 0;\n      values.forEach(val => {\n        amount += val.amount;\n        count += val.count;\n        lastUpdated = Math.max(lastUpdated, +val.lastUpdated);\n      });\n      return { amount, count, lastUpdated };\n    };\n\n    return super.mapReduce(map, reduce, {\n      out: {\n        replace: this.statByProjectCollectionName,\n      },\n    });\n  }\n\n  getStatByProject() {\n    const manager = new EntityManager(this.mongoUrl, this.statByProjectCollectionName);\n    return manager.find();\n  }\n\n  computeStatByYear() {\n    const map = function () { // eslint-disable-line\n      if (this.records) {\n        this.records.forEach(record => {\n          if (record.isDeleted) return;\n          emit(record.date.getFullYear(), { // eslint-disable-line\n            amount: record.amount / 1000,\n            count: 1,\n            lastUpdated: record.date,\n          });\n        });\n      }\n    };\n    const reduce = (key, values) => {\n      let amount = 0;\n      let count = 0;\n      let lastUpdated = 0; // eslint-disable-line\n      values.forEach((val) => {\n        amount += val.amount;\n        count += val.count;\n        lastUpdated = Math.max(lastUpdated, +val.lastUpdated);\n      });\n      // mongodb 中不支持shorthand\n      return {\n        amount: amount, // eslint-disable-line object-shorthand\n        count: count, // eslint-disable-line object-shorthand\n        lastUpdated: lastUpdated, // eslint-disable-line object-shorthand\n      };\n    };\n\n    return super.mapReduce(map, reduce, {\n      out: {\n        replace: this.statByYearCollectionName,\n      },\n    });\n  }\n\n  getStatByYear() {\n    const manager = new EntityManager(this.mongoUrl, this.statByYearCollectionName);\n    return manager.find();\n  }\n}\n"],"names":["EntityManager","mongoUrl","collectionName","useEntity","useCollection","cb","entityData","resolve","reject","col","result","insertOne","console","log","query","limit","skip","cursor","find","toArray","length","count","findOne","_id","remove","single","other","update","$set","condition","updateQuery","options","error","map","reduce","mapReduce","ACCEPTORS_COLLECTION","STAT_BY_PROJECT","STAT_BY_YEAR","AcceptorManager","statByProjectCollectionName","statByYearCollectionName","idCard","type","number","insertedId","acceptor","eduHistory","careerHistory","records","name","year","$addToSet","oldDoc","filtered","filter","edu","car","id","project","amount","date","getFullYear","ObjectId","recordId","record","equals","fieldsForFilter","text","reg","RegExp","$or","field","all","totalCount","data","parseInt","$elemMatch","$gte","Date","$lt","forEach","isDeleted","emit","lastUpdated","key","values","val","Math","max","out","replace","manager"],"mappings":"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"}
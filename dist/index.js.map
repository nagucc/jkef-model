{"version":3,"file":"index.js","sources":["../src/entity.js","../src/acceptors.js"],"sourcesContent":["/*\n\nEntityManager 类，用于生成一个通用的管理Entity的类。\n */\n\nimport { useCollection } from 'mongo-use-collection';\n// import { ObjectId } from 'mongodb';\n\nexport default class EntityManager {\n  /**\n   * 构造函数\n   * @param  {String} collectionName Entity使用的集合的名称\n   * @param  {String} mongoUrl       所使用的数据库的连接字符串\n   */\n  constructor(mongoUrl, collectionName) {\n    this.collectionName = collectionName;\n    this.mongoUrl = mongoUrl;\n    this.useEntity = cb => useCollection(mongoUrl, collectionName, cb);\n  }\n\n  /**\n   *\n   * 插入实体对象到数据库中\n   * @param  {Object} entityData 实体对象数据\n   * @return {Promise}            操作结果\n   */\n  insert(entityData) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        result = await col.insertOne(entityData);\n        resolve(result);\n      } catch (e) {\n        console.log('EntityManager Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n/**\n * 查询实体对象\n * @param  {Object} query =             {}  查询条件\n * @param  {Number} limit =             100 查询结果限制\n * @param  {number} skip  =             0   跳过开头的结果\n * @return {Promise}       操作结果\n */\n  find({ query = {}, limit = 100, skip = 0 } = { query: {}, limit: 100, skip: 0 }) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        console.log(`[EntityManager find][${col.collectionName}]query::`, JSON.stringify(query));\n        const cursor = col.find(query).skip(skip).limit(limit);\n        result = await cursor.toArray();\n        console.log('[EntityManager find]', col.collectionName, '::result.length::', result.length);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager find]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  count(query = {}) {\n    console.log('[EntityManager count]query::', JSON.stringify(query));\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.count(query);\n        console.log('[EntityManager count]result::', result);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager count]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  findOne(query = {}) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.findOne(query);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager findOne]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  findById(_id) {\n    return this.findOne({ _id });\n  }\n\n  removeById(_id) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        await col.remove({ _id }, { single: true });\n        resolve();\n      } catch (e) {\n        console.log('[EntityManager findById]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  updateById({ _id, ...other }) {\n    return this.update({ _id }, { $set: other });\n  }\n\n  update(condition, updateQuery, options = {}) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.update(condition, updateQuery, options);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager update]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  mapReduce(map, reduce, options) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.mapReduce(map, reduce, options);\n        resolve(result);\n      } catch (e) {\n        reject(e);\n      }\n    }));\n  }\n}\n","/*\neslint-disable no-underscore-dangle\n */\nimport { ObjectId } from 'mongodb';\nimport EntityManager from './entity';\n\nexport const ACCEPTORS_COLLECTION = 'acceptors';\nexport const STAT_BY_PROJECT = 'stat_by_project';\nexport const STAT_BY_YEAR = 'stat_by_year';\nexport default class AcceptorManager extends EntityManager {\n  constructor(mongoUrl, collectionName = ACCEPTORS_COLLECTION) {\n    super(mongoUrl, collectionName);\n    this.statByProjectCollectionName = `${collectionName}.${STAT_BY_PROJECT}`;\n    this.statByYearCollectionName = `${collectionName}.${STAT_BY_YEAR}`;\n  }\n  async insert({ idCard: { type, number }, ...other }) {\n    if (!type || !number) {\n      return Promise.reject('证件类型和号码不能为空');\n    }\n    try {\n      const result = await super.insert({ idCard: { type, number }, ...other });\n      return Promise.resolve(result.insertedId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  updateById(acceptor) {\n    // _id, eduHistory, careerHistory, records 这几个字段不能更新\n    const { eduHistory, careerHistory, records, // eslint-disable-line no-unused-vars\n      ...other } = acceptor;\n    return super.updateById(other);\n  }\n  addEdu(_id, { name, year, ...other }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    return super.update({ _id }, { $addToSet: {\n      eduHistory: { name, year, ...other },\n    } });\n  }\n  async removeEdu(_id, { name, year }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    try {\n      const oldDoc = await super.findById(_id);\n      const filtered = oldDoc.eduHistory.filter(edu =>\n        !(edu.name === name && edu.year === year));\n      await super.update({ _id }, {\n        $set: {\n          eduHistory: filtered,\n        },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  addCareer(_id, { name, year, ...other }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    return super.update({ _id }, { $addToSet: {\n      careerHistory: { name, year, ...other },\n    } });\n  }\n  async removeCareer(_id, { name, year }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    try {\n      const oldDoc = await super.findById(_id);\n      const filtered = oldDoc.careerHistory.filter(car =>\n        !(car.name === name && car.year === year));\n      await super.update({ _id }, {\n        $set: {\n          careerHistory: filtered,\n        },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async addRecord(_id, { id, project, amount, date, ...other }) {\n    if (!project || !amount || !date) return Promise.reject('project、amount和date不能为空');\n    if (!Number.isInteger(amount)) return Promise.reject('amount必须是整数');\n    if (!date.getFullYear) return Promise.reject('date必须是Date类型');\n    if (!id) id = new ObjectId(); // eslint-disable-line no-param-reassign\n    try {\n      await super.update({ _id }, {\n        $addToSet: {\n          records: {\n            _id: id,\n            project,\n            amount,\n            date,\n            ...other,\n          },\n        },\n      });\n      return Promise.resolve(id);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async removeRecord(_id, recordId) {\n    try {\n      const oldDoc = await super.findById(_id);\n      const records = oldDoc.records.filter(record => !record._id.equals(recordId));\n      await super.update({ _id }, {\n        $set: { records },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  findOneByIdCardNumber(number) {\n    return super.findOne({ 'idCard.number': number });\n  }\n\n  async list({ text, skip = 0, limit = 100, fieldsForFilter = ['name', 'phone'] } = {\n    skip: 0, limit: 100, fieldsForFilter: ['name', 'phone'],\n  }) {\n    let query = {};\n    if (text) {\n      if (!fieldsForFilter || !fieldsForFilter.length) {\n        return Promise.reject('当text有值时，fieldsForFilter字段不能为空');\n      }\n      const reg = new RegExp(text);\n      query = Object.assign(query, {\n        $or: fieldsForFilter.map(field => ({ [field]: reg })),\n      });\n    }\n    try {\n      const result = await Promise.all([\n        super.count(query),\n        super.find({ query, skip, limit }),\n      ]);\n      return Promise.resolve({\n        totalCount: result[0],\n        data: result[1],\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  async listByRecord({ project, year, text,\n    skip = 0, limit = 100, fieldsForFilter = ['name', 'phone'] } = {}) {\n    let query = {};\n    if (text) {\n      if (!fieldsForFilter || !fieldsForFilter.length) {\n        return Promise.reject('当text有值时，fieldsForFilter字段不能为空');\n      }\n      const reg = new RegExp(text);\n      query = Object.assign(query, {\n        $or: fieldsForFilter.map(field => ({ [field]: reg })),\n      });\n    }\n    if (project || year) {\n      let elemMatch = {};\n      if (project) {\n        elemMatch = { ...elemMatch, project };\n      }\n      if (year) {\n        elemMatch = {\n          ...elemMatch,\n          date: {\n            $gte: new Date(year, 0, 1),\n            $lt: new Date(year + 1, 0, 1),\n          },\n        };\n      }\n      query = Object.assign(query, {\n        records: {\n          $elemMatch: elemMatch,\n        },\n      });\n    }\n    try {\n      const result = await Promise.all([\n        super.count(query),\n        super.find({ query, skip, limit }),\n      ]);\n      return Promise.resolve({\n        totalCount: result[0],\n        data: result[1],\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  computeStatByProject() {\n    const map = function () { // eslint-disable-line\n      if (this.records) {\n        this.records.forEach(record => {\n          if (record.isDeleted) return;\n          emit(record.project, { // eslint-disable-line\n            amount: record.amount / 1000,\n            count: 1,\n            lastUpdated: record.date,\n          });\n        });\n      }\n    };\n    const reduce = (key, values) => {\n      let amount = 0;\n      let count = 0;\n      let lastUpdated = 0;\n      values.forEach(val => {\n        amount += val.amount;\n        count += val.count;\n        lastUpdated = Math.max(lastUpdated, +val.lastUpdated);\n      });\n      return { amount, count, lastUpdated };\n    };\n\n    return super.mapReduce(map, reduce, {\n      out: {\n        replace: this.statByProjectCollectionName,\n      },\n    });\n  }\n\n  getStatByProject() {\n    const manager = new EntityManager(this.mongoUrl, this.statByProjectCollectionName);\n    return manager.find();\n  }\n\n  computeStatByYear() {\n    const map = function () { // eslint-disable-line\n      if (this.records) {\n        this.records.forEach(record => {\n          if (record.isDeleted) return;\n          emit(record.date.getYear() + 1900, { // eslint-disable-line\n            amount: record.amount / 1000,\n            count: 1,\n            lastUpdated: record.date,\n          });\n        });\n      }\n    };\n    const reduce = (key, values) => {\n      let amount = 0;\n      let count = 0;\n      let lastUpdated = 0;\n      values.forEach((val) => {\n        amount += val.amount;\n        count += val.count;\n        lastUpdated = Math.max(lastUpdated, val.lastUpdated);\n      });\n      return { amount, count, lastUpdated };\n    };\n\n    return super.mapReduce(map, reduce, {\n      out: {\n        replace: this.statByYearCollectionName,\n      },\n    });\n  }\n\n  getStatByYear() {\n    const manager = new EntityManager(this.mongoUrl, this.statByYearCollectionName);\n    return manager.find();\n  }\n}\n"],"names":["EntityManager","mongoUrl","collectionName","useEntity","useCollection","cb","entityData","resolve","reject","col","insertOne","result","log","query","limit","skip","find","cursor","toArray","length","count","findOne","_id","remove","single","other","update","$set","condition","updateQuery","options","map","reduce","mapReduce","ACCEPTORS_COLLECTION","STAT_BY_PROJECT","STAT_BY_YEAR","AcceptorManager","statByProjectCollectionName","statByYearCollectionName","idCard","type","number","insertedId","acceptor","eduHistory","careerHistory","records","name","year","$addToSet","oldDoc","filter","edu","filtered","car","id","project","amount","date","getFullYear","ObjectId","recordId","record","equals","fieldsForFilter","text","reg","RegExp","field","all","elemMatch","Date","forEach","isDeleted","key","values","lastUpdated","val","Math","max","manager","getYear"],"mappings":"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"}
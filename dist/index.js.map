{"version":3,"file":"index.js","sources":["../src/entity.js","../src/acceptors.js"],"sourcesContent":["/*\n\nEntityManager 类，用于生成一个通用的管理Entity的类。\n */\n\nimport { useCollection } from 'mongo-use-collection';\n// import { ObjectId } from 'mongodb';\n\nexport default class EntityManager {\n  /**\n   * 构造函数\n   * @param  {String} collectionName Entity使用的集合的名称\n   * @param  {String} mongoUrl       所使用的数据库的连接字符串\n   */\n  constructor(collectionName, mongoUrl) {\n    this.collectionName = collectionName;\n    this.mongoUrl = mongoUrl;\n    this.useEntity = cb => useCollection(mongoUrl, collectionName, cb);\n  }\n\n  /**\n   *\n   * 插入实体对象到数据库中\n   * @param  {Object} entityData 实体对象数据\n   * @return {Promise}            操作结果\n   */\n  insert(entityData) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        result = await col.insertOne(entityData);\n        resolve(result);\n      } catch (e) {\n        console.log('EntityManager Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n/**\n * 查询实体对象\n * @param  {Object} query =             {}  查询条件\n * @param  {Number} limit =             100 查询结果限制\n * @param  {number} skip  =             0   跳过开头的结果\n * @return {Promise}       操作结果\n */\n  find({ query = {}, limit = 100, skip = 0 }) {\n    console.log('[EntityManager find]query::', JSON.stringify(query));\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        const cursor = col.find(query).skip(skip).limit(limit);\n        result = await cursor.toArray();\n        console.log('[EntityManager find]', col.collectionName, '::result.length::', result.length);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager find]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  count(query = {}) {\n    console.log('[EntityManager count]query::', JSON.stringify(query));\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.count(query);\n        console.log('[EntityManager count]result::', result);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager count]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  findById(_id) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.findOne({ _id });\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager findById]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n  removeById(_id) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        await col.remove({ _id }, { single: true });\n        resolve();\n      } catch (e) {\n        console.log('[EntityManager findById]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  updateById({ _id, ...other }) {\n    return this.update({ _id }, { $set: other });\n  }\n\n  update(condition, updateQuery, options = {}) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.update(condition, updateQuery, options);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager update]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n}\n","/*\neslint-disable no-underscore-dangle\n */\nimport { useCollection } from 'mongo-use-collection';\nimport { ObjectId } from 'mongodb';\nimport EntityManager from './entity';\n\nconst { all } = Promise;\n\nexport const ACCEPTORS_COLLECTION = 'acceptors';\nexport const STAT_BY_PROJECT = 'stat_by_project';\nexport const STAT_BY_YEAR = 'stat_by_year';\nexport default class AcceptorManager extends EntityManager {\n  constructor(mongoUrl, collectionName = ACCEPTORS_COLLECTION) {\n    super(collectionName, mongoUrl);\n  }\n  async insert({ idCard: { type, number }, ...other }) {\n    if (!type || !number) {\n      return Promise.reject('证件类型和号码不能为空');\n    }\n    try {\n      const result = await super.insert({ idCard: { type, number }, ...other });\n      return Promise.resolve(result.insertedId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  updateById(acceptor) {\n    // _id, eduHistory, careerHistory, records 这几个字段不能更新\n    const { eduHistory, careerHistory, records, // eslint-disable-line no-unused-vars\n      ...other } = acceptor;\n    return super.updateById(other);\n  }\n  addEdu(_id, { name, year, ...other }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    return super.update({ _id }, { $addToSet: {\n      eduHistory: { name, year, ...other },\n    } });\n  }\n  async removeEdu(_id, { name, year }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    try {\n      const oldDoc = await super.findById(_id);\n      const filtered = oldDoc.eduHistory.filter(edu =>\n        !(edu.name === name && edu.year === year));\n      await super.update({ _id }, {\n        $set: {\n          eduHistory: filtered,\n        },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  addCareer(_id, { name, year, ...other }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    return super.update({ _id }, { $addToSet: {\n      careerHistory: { name, year, ...other },\n    } });\n  }\n  async removeCareer(_id, { name, year }) {\n    if (!name || !year) return Promise.reject('name和year不能为空');\n    if (!Number.isInteger(year)) return Promise.reject('year必须是整数');\n    try {\n      const oldDoc = await super.findById(_id);\n      const filtered = oldDoc.careerHistory.filter(car =>\n        !(car.name === name && car.year === year));\n      await super.update({ _id }, {\n        $set: {\n          careerHistory: filtered,\n        },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async addRecord(_id, { id, project, amount, date, ...other }) {\n    if (!project || !amount || !date) return Promise.reject('project、amount和date不能为空');\n    if (!Number.isInteger(amount)) return Promise.reject('amount必须是整数');\n    if (!date.getFullYear) return Promise.reject('date必须是Date类型');\n    if (!id) id = new ObjectId(); // eslint-disable-line no-param-reassign\n    try {\n      await super.update({ _id }, {\n        $addToSet: {\n          records: {\n            _id: id,\n            project,\n            amount,\n            date,\n            ...other,\n          },\n        },\n      });\n      return Promise.resolve(id);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async removeRecord(_id, recordId) {\n    try {\n      const oldDoc = await super.findById(_id);\n      const records = oldDoc.records.filter(record => !record._id.equals(recordId));\n      await super.update({ _id }, {\n        $set: { records },\n      });\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  async list({ text, skip = 0, limit = 100, fieldsForFilter = ['name', 'phone'] } = {\n    skip: 0, limit: 100, fieldsForFilter: ['name', 'phone']\n  }) {\n    let query = {};\n    if (text) {\n      if (!fieldsForFilter || !fieldsForFilter.length) {\n        return Promise.reject('当text有值时，fieldsForFilter字段不能为空');\n      }\n      const reg = new RegExp(text);\n      query = Object.assign(query, {\n        $or: fieldsForFilter.map(field => ({ [field]: reg })),\n      });\n    }\n    try {\n      const result = await Promise.all([\n        super.count(query),\n        super.find({ query, skip, limit }),\n      ]);\n      return Promise.resolve({\n        totalCount: result[0],\n        data: result[1],\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  async listByRecord({ project, year, text,\n    skip = 0, limit = 100, fieldsForFilter = ['name', 'phone'] } = {}) {\n    let query = {};\n    if (text) {\n      if (!fieldsForFilter || !fieldsForFilter.length) {\n        return Promise.reject('当text有值时，fieldsForFilter字段不能为空');\n      }\n      const reg = new RegExp(text);\n      query = Object.assign(query, {\n        $or: fieldsForFilter.map(field => ({ [field]: reg })),\n      });\n    }\n    if (project) {\n      query = Object.assign(query, {\n        'records.project': project,\n      });\n    }\n\n    if (year) {\n      query = Object.assign(query, {\n        records: {\n          $elemMatch: {\n            date: {\n              $gte: new Date(year, 0, 1),\n              $lt: new Date(year + 1, 0, 1),\n            },\n          },\n        },\n      });\n    }\n    try {\n      const result = await Promise.all([\n        super.count(query),\n        super.find({ query, skip, limit }),\n      ]);\n      return Promise.resolve({\n        totalCount: result[0],\n        data: result[1],\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}\n\nexport const useAcceptors = cb => useCollection(mongoUrl, ACCEPTORS_COLLECTION, cb);\nexport const useStatByProject = cb => useCollection(mongoUrl, STAT_BY_PROJECT, cb);\nexport const useStatByYear = cb => useCollection(mongoUrl, STAT_BY_YEAR, cb);\nconst useProfiles = cb => useCollection(mongoUrl, profileCollection, cb);\n\nexport const computeStatByProject = async () =>\n  new Promise((resolve, reject) => useAcceptors(async col => {\n    const map = function () { // eslint-disable-line\n      if (this.records) {\n        this.records.forEach(function (record) { // eslint-disable-line\n          if (record.isDeleted) return;\n          emit(record.project, { // eslint-disable-line\n            amount: record.amount / 1000,\n            count: 1,\n            lastUpdated: record.date,\n          });\n        });\n      }\n    };\n    const reduce = function (key, values) { // eslint-disable-line\n      var amount = 0, count = 0, lastUpdated = 0; // eslint-disable-line\n      values.forEach(val => {\n        amount += val.amount;\n        count += val.count;\n        lastUpdated = Math.max(lastUpdated, +val.lastUpdated);\n      });\n      // mongodb 中不支持shorthand\n      return {\n        amount: amount, // eslint-disable-line object-shorthand\n        count: count, // eslint-disable-line object-shorthand\n        lastUpdated: lastUpdated, // eslint-disable-line object-shorthand\n      };\n    };\n\n    try {\n      await col.mapReduce(map, reduce, {\n        out: {\n          replace: STAT_BY_PROJECT,\n        },\n      });\n      resolve();\n    } catch (e) {\n      reject(e);\n    }\n  }));\n\nexport const computeStatByYear = async () =>\n  new Promise((resolve, reject) => {\n    useAcceptors(async col => {\n      const map = function () { // eslint-disable-line\n        if (this.records) {\n          this.records.forEach(function (record) { // eslint-disable-line\n            if (record.isDeleted) return;\n            emit(record.date.getYear() + 1900, { // eslint-disable-line\n              amount: record.amount / 1000,\n              count: 1,\n              lastUpdated: record.date,\n            });\n          });\n        }\n      };\n      const reduce = function (key, values) { // eslint-disable-line\n        var amount = 0, count = 0, lastUpdated = 0; // eslint-disable-line\n        values.forEach((val) => {\n          amount += val.amount;\n          count += val.count;\n          lastUpdated = Math.max(lastUpdated, +val.lastUpdated);\n        });\n        // mongodb 中不支持shorthand\n        return {\n          amount: amount, // eslint-disable-line object-shorthand\n          count: count, // eslint-disable-line object-shorthand\n          lastUpdated: lastUpdated, // eslint-disable-line object-shorthand\n        };\n      };\n      try {\n        await col.mapReduce(map, reduce, {\n          out: {\n            replace: STAT_BY_YEAR,\n          },\n        });\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  });\n\nexport const getStatByProject = () =>\n  new Promise(resolve => {\n    useStatByProject(async col => {\n      const result = await col.find().toArray();\n      resolve(result);\n    });\n  });\n\nexport const getStatByYear = () =>\n  new Promise(resolve => {\n    useStatByYear(async col => {\n      const result = await col.find().toArray();\n      resolve(result);\n    });\n  });\n\nexport const findAcceptors = async ({ text, year, project, projections, skip = 0, limit = 20 } = {}) => {\n  showLog && console.time('findAcceptors from Profiles');\n  let condition = { isAcceptor: true };\n  if (text) {\n    const reg = new RegExp(text);\n    condition = Object.assign(condition, {\n      $or: [{ name: reg }, { phone: reg }],\n    });\n  }\n  if (project) {\n    condition = Object.assign(condition, {\n      'records.project': project,\n    });\n  }\n\n  if (year) {\n    year = parseInt(year, 10); // eslint-disable-line\n    condition = Object.assign(condition, {\n      records: {\n        $elemMatch: {\n          date: {\n            $gte: new Date(year, 0, 1),\n            $lt: new Date(year + 1, 0, 1),\n          },\n        },\n      },\n    });\n  }\n\n  const { find, count } = profileManager;\n  try {\n    const result = await all([count(condition), find(condition)]);\n    console.log('result::::::::', result);\n    return Promise.resolve({\n      totalCount: result[0],\n      data: result[1],\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\n/*\n通过idCard.number找到相应的acceptor\n */\nexport const findByIdCardNumber = async idCardNumber =>\n  new Promise((resolve, reject) => {\n    useAcceptors(async col => {\n      try {\n        const doc = await col.findOne({ 'idCard.number': idCardNumber });\n        resolve(doc);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  });\n\n/*\n将数据标记为已删除（isDeleted)\n */\nexport const trash = _id => new Promise((resolve, reject) =>\n  useAcceptors(async col => {\n    try {\n      const result = await col.updateOne({ _id }, {\n        $set: { isDeleted: true },\n      });\n      resolve(result);\n    } catch (e) {\n      reject(e);\n    }\n  }));\n\nexport const remove = async _id =>\n  new Promise((resolve, reject) => useAcceptors(async col => {\n    try {\n      resolve(await col.remove({ _id }));\n    } catch (e) {\n      reject(e);\n    }\n  }));\n"],"names":["EntityManager","collectionName","mongoUrl","useEntity","useCollection","cb","entityData","resolve","reject","col","insertOne","result","log","query","limit","skip","find","cursor","toArray","length","count","_id","findOne","remove","single","other","update","$set","condition","updateQuery","options","all","ACCEPTORS_COLLECTION","STAT_BY_PROJECT","STAT_BY_YEAR","AcceptorManager","idCard","type","number","insertedId","acceptor","eduHistory","careerHistory","records","name","year","$addToSet","oldDoc","filter","edu","filtered","car","id","project","amount","date","getFullYear","ObjectId","recordId","record","equals","fieldsForFilter","text","reg","RegExp","map","field","Date","useAcceptors","computeStatByProject","forEach","isDeleted","reduce","key","values","lastUpdated","val","Math","max","mapReduce","computeStatByYear","getYear","findAcceptors","projections","console","time","isAcceptor","phone","parseInt","profileManager","findByIdCardNumber","idCardNumber","doc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAMA;;IAEqBA;;;;;;yBAMPC,cAAZ,EAA4BC,QAA5B,EAAsC;;;SAC/BD,cAAL,GAAsBA,cAAtB;SACKC,QAAL,GAAgBA,QAAhB;SACKC,SAAL,GAAiB;aAAMC,iCAAcF,QAAd,EAAwBD,cAAxB,EAAwCI,EAAxC,CAAN;KAAjB;;;;;;;;;;;;;2BASKC,YAAY;;;aACV,aAAY,UAACC,OAAD,EAAUC,MAAV;eAAqB,MAAKL,SAAL;gEAAe,iBAAMM,GAAN;;;;;;0BAAA;;;2BAGpCA,IAAIC,SAAJ,CAAcJ,UAAd,CAHoC;;;0BAAA;;4BAI3CK,MAAR;;;;;;;;4BAEQC,GAAR,CAAY,uBAAZ,eANmD;;;;;;;;;WAAf;;;;;YAArB;OAAZ,CAAP;;;;;;;;;;;;;gCAmB0C;;;8BAArCC,KAAqC;UAArCA,KAAqC,+BAA7B,EAA6B;8BAAzBC,KAAyB;UAAzBA,KAAyB,+BAAjB,GAAiB;6BAAZC,IAAY;UAAZA,IAAY,8BAAL,CAAK;;cAClCH,GAAR,CAAY,6BAAZ,EAA2C,gBAAeC,KAAf,CAA3C;aACO,aAAY,UAACN,OAAD,EAAUC,MAAV;eAAqB,OAAKL,SAAL;iEAAe,kBAAMM,GAAN;;;;;;0BAAA;;0BAAA,GAGpCA,IAAIO,IAAJ,CAASH,KAAT,EAAgBE,IAAhB,CAAqBA,IAArB,EAA2BD,KAA3B,CAAiCA,KAAjC,CAHoC;;2BAIpCG,OAAOC,OAAP,EAJoC;;;0BAAA;;4BAK3CN,GAAR,CAAY,sBAAZ,EAAoCH,IAAIR,cAAxC,EAAwD,mBAAxD,EAA6EU,OAAOQ,MAApF;4BACQR,MAAR;;;;;;;;4BAEQC,GAAR,CAAY,6BAAZ,gBARmD;;;;;;;;;WAAf;;;;;YAArB;OAAZ,CAAP;;;;4BAcgB;;;UAAZC,KAAY,yDAAJ,EAAI;;cACRD,GAAR,CAAY,8BAAZ,EAA4C,gBAAeC,KAAf,CAA5C;aACO,aAAY,UAACN,OAAD,EAAUC,MAAV;eAAqB,OAAKL,SAAL;iEAAe,kBAAMM,GAAN;;;;;;;;2BAE9BA,IAAIW,KAAJ,CAAUP,KAAV,CAF8B;;;0BAAA;;4BAG3CD,GAAR,CAAY,+BAAZ,EAA6CD,MAA7C;4BACQA,MAAR;;;;;;;;4BAEQC,GAAR,CAAY,8BAAZ,gBANmD;;;;;;;;;WAAf;;;;;YAArB;OAAZ,CAAP;;;;6BAYOS,KAAK;;;aACL,aAAY,UAACd,OAAD,EAAUC,MAAV;eAAqB,OAAKL,SAAL;iEAAe,kBAAMM,GAAN;;;;;;;;2BAE9BA,IAAIa,OAAJ,CAAY,EAAED,QAAF,EAAZ,CAF8B;;;0BAAA;;4BAG3CV,MAAR;;;;;;;;4BAEQC,GAAR,CAAY,iCAAZ,gBALmD;;;;;;;;;WAAf;;;;;YAArB;OAAZ,CAAP;;;;+BAUSS,KAAK;;;aACP,aAAY,UAACd,OAAD,EAAUC,MAAV;eAAqB,OAAKL,SAAL;iEAAe,kBAAMM,GAAN;;;;;;;2BAE7CA,IAAIc,MAAJ,CAAW,EAAEF,QAAF,EAAX,EAAoB,EAAEG,QAAQ,IAAV,EAApB,CAF6C;;;;;;;;;;;4BAK3CZ,GAAR,CAAY,iCAAZ,gBALmD;;;;;;;;;WAAf;;;;;YAArB;OAAZ,CAAP;;;;sCAW4B;UAAjBS,GAAiB,SAAjBA,GAAiB;;UAATI,KAAS;;aACrB,KAAKC,MAAL,CAAY,EAAEL,QAAF,EAAZ,EAAqB,EAAEM,MAAMF,KAAR,EAArB,CAAP;;;;2BAGKG,WAAWC,aAA2B;;;UAAdC,OAAc,yDAAJ,EAAI;;aACpC,aAAY,UAACvB,OAAD,EAAUC,MAAV;eAAqB,OAAKL,SAAL;iEAAe,kBAAMM,GAAN;;;;;;;;2BAE9BA,IAAIiB,MAAJ,CAAWE,SAAX,EAAsBC,WAAtB,EAAmCC,OAAnC,CAF8B;;;0BAAA;;4BAG3CnB,MAAR;;;;;;;;4BAEQC,GAAR,CAAY,+BAAZ,gBALmD;;;;;;;;;WAAf;;;;;YAArB;OAAZ,CAAP;;;;;;;;;ACxGJ,IAOQmB,eAAAA;;;AAER,AAAO,IAAMC,uBAAuB,WAA7B;AACP,AAAO,IAAMC,kBAAkB,iBAAxB;AACP,AAAO,IAAMC,eAAe,cAArB;;IACcC;;;2BACPjC,QAAZ,EAA6D;QAAvCD,cAAuC,yDAAtB+B,oBAAsB;;;;8HACrD/B,cADqD,EACrCC,QADqC;;;;;;;iCAG9CkC;YAAUC,oBAAAA;YAAMC,sBAAAA;;YAAab;;;;;;;sBACtC,CAACY,IAAD,IAAS,CAACC;;;;;iDACL,SAAQ9B,MAAR,CAAe,aAAf;;;;;4JAG6B4B,QAAQ,EAAEC,UAAF,EAAQC,cAAR,MAAqBb;;;;iDAC1D,SAAQlB,OAAR,CAAgBI,OAAO4B,UAAvB;;;;;iDAEA,SAAQ/B,MAAR;;;;;;;;;;;;;;;;;;+BAGAgC,UAAU;;UAEXC,UAFW,GAGJD,QAHI,CAEXC,UAFW;UAECC,aAFD,GAGJF,QAHI,CAECE,aAFD;UAEgBC,OAFhB,GAGJH,QAHI,CAEgBG,OAFhB;;UAGdlB,KAHc,4BAGJe,QAHI;;2IAIKf,KAAxB;;;;2BAEKJ,YAA+B;UAAxBuB,IAAwB,SAAxBA,IAAwB;UAAlBC,IAAkB,SAAlBA,IAAkB;;UAATpB,KAAS;;UAChC,CAACmB,IAAD,IAAS,CAACC,IAAd,EAAoB,OAAO,SAAQrC,MAAR,CAAe,eAAf,CAAP;UAChB,CAAC,kBAAiBqC,IAAjB,CAAL,EAA6B,OAAO,SAAQrC,MAAR,CAAe,WAAf,CAAP;uIACT,EAAEa,QAAF,EAApB,EAA6B,EAAEyB,WAAW;iCAC1BF,UAAd,EAAoBC,UAApB,IAA6BpB,KAA7B;SAD2B,EAA7B;;;;;+EAIcJ;YAAOuB,aAAAA;YAAMC,aAAAA;;;;;;sBACvB,CAACD,IAAD,IAAS,CAACC;;;;;kDAAa,SAAQrC,MAAR,CAAe,eAAf;;;oBACtB,kBAAiBqC,IAAjB;;;;;kDAA+B,SAAQrC,MAAR,CAAe,WAAf;;;;;mJAEEa;;;;2BACnB0B,OAAON,UAAP,CAAkBO,MAAlB,CAAyB;yBACxC,EAAEC,IAAIL,IAAJ,KAAaA,IAAb,IAAqBK,IAAIJ,IAAJ,KAAaA,IAApC,CADwC;iBAAzB;;iJAEE,EAAExB,QAAF,IAAS;wBACpB;gCACQ6B;;;;;kDAGT,SAAQ3C,OAAR;;;;;kDAEA,SAAQC,MAAR;;;;;;;;;;;;;;;;;;8BAGDa,YAA+B;UAAxBuB,IAAwB,SAAxBA,IAAwB;UAAlBC,IAAkB,SAAlBA,IAAkB;;UAATpB,KAAS;;UACnC,CAACmB,IAAD,IAAS,CAACC,IAAd,EAAoB,OAAO,SAAQrC,MAAR,CAAe,eAAf,CAAP;UAChB,CAAC,kBAAiBqC,IAAjB,CAAL,EAA6B,OAAO,SAAQrC,MAAR,CAAe,WAAf,CAAP;uIACT,EAAEa,QAAF,EAApB,EAA6B,EAAEyB,WAAW;oCACvBF,UAAjB,EAAuBC,UAAvB,IAAgCpB,KAAhC;SAD2B,EAA7B;;;;;+EAIiBJ;YAAOuB,aAAAA;YAAMC,aAAAA;;;;;;sBAC1B,CAACD,IAAD,IAAS,CAACC;;;;;kDAAa,SAAQrC,MAAR,CAAe,eAAf;;;oBACtB,kBAAiBqC,IAAjB;;;;;kDAA+B,SAAQrC,MAAR,CAAe,WAAf;;;;;mJAEEa;;;;2BACnB0B,OAAOL,aAAP,CAAqBM,MAArB,CAA4B;yBAC3C,EAAEG,IAAIP,IAAJ,KAAaA,IAAb,IAAqBO,IAAIN,IAAJ,KAAaA,IAApC,CAD2C;iBAA5B;;iJAEE,EAAExB,QAAF,IAAS;wBACpB;mCACW6B;;;;;kDAGZ,SAAQ3C,OAAR;;;;;kDAEA,SAAQC,MAAR;;;;;;;;;;;;;;;;;;;+EAGKa;YAAO+B,YAAAA;YAAIC,iBAAAA;YAASC,gBAAAA;YAAQC,cAAAA;;YAAS9B;;;;;;sBAC/C,CAAC4B,OAAD,IAAY,CAACC,MAAb,IAAuB,CAACC;;;;;kDAAa,SAAQ/C,MAAR,CAAe,yBAAf;;;oBACpC,kBAAiB8C,MAAjB;;;;;kDAAiC,SAAQ9C,MAAR,CAAe,aAAf;;;oBACjC+C,KAAKC;;;;;kDAAoB,SAAQhD,MAAR,CAAe,eAAf;;;oBAC1B,CAAC4C,EAAL,EAASA,KAAK,IAAIK,gBAAJ,EAAL;;;iJAEY,EAAEpC,QAAF,IAAS;6BACf;;2BAEF+B,EADP;sCAAA;oCAAA;;uBAKK3B,KALL;;;;;kDASG,SAAQlB,OAAR,CAAgB6C,EAAhB;;;;;kDAEA,SAAQ5C,MAAR;;;;;;;;;;;;;;;;;;;gFAGQa,KAAKqC;;;;;;;;mJAEgBrC;;;;0BACpB0B,OAAOJ,OAAP,CAAeK,MAAf,CAAsB;yBAAU,CAACW,OAAOtC,GAAP,CAAWuC,MAAX,CAAkBF,QAAlB,CAAX;iBAAtB;;iJACG,EAAErC,QAAF,IAAS;wBACpB,EAAEsB,gBAAF;;;;kDAED,SAAQpC,OAAR;;;;;kDAEA,SAAQC,MAAR;;;;;;;;;;;;;;;;;;;;2EAIuE;gBAC1E,CAD0E,EACvEM,OAAO,GADgE,EAC3D+C,iBAAiB,CAAC,MAAD,EAAS,OAAT;;;YAD3BC,cAAAA;iCAAM/C;YAAAA,mCAAO;kCAAGD;YAAAA,qCAAQ;2CAAK+C;YAAAA,wDAAkB,CAAC,MAAD,EAAS,OAAT;;;;;;;;wBAG9C;;qBACRC;;;;;;sBACE,CAACD,eAAD,IAAoB,CAACA,gBAAgB1C,MAAzC,EAAiD;;yBACxC,SAAQX,MAAR,CAAe,gCAAf;;;sBAEHuD,MAAM,IAAIC,MAAJ,CAAWF,IAAX,CAAZ;0BACQ,eAAcjD,KAAd,EAAqB;yBACtBgD,gBAAgBI,GAAhB,CAAoB;iDAAaC,KAAb,EAAqBH,GAArB;qBAApB;mBADC,CAAR;;;;;;;;;;;;;uBAKqB,SAAQhC,GAAR,CAAY,0HACnBlB,KADmB,2HAEpB,EAAEA,YAAF,EAASE,UAAT,EAAeD,YAAf,EAFoB,EAAZ;;;;kDAId,SAAQP,OAAR,CAAgB;8BACTI,OAAO,CAAP,CADS;wBAEfA,OAAO,CAAP;iBAFD;;;;;kDAKA,SAAQH,MAAR;;;;;;;;;;;;;;;;;;;;2EAIsD;;YAD5C6C,iBAAAA;YAASR,cAAAA;YAAMiB,cAAAA;iCAClC/C;YAAAA,mCAAO;kCAAGD;YAAAA,qCAAQ;2CAAK+C;YAAAA,wDAAkB,CAAC,MAAD,EAAS,OAAT;;;;;;;;wBAC7B;;qBACRC;;;;;;sBACE,CAACD,eAAD,IAAoB,CAACA,gBAAgB1C,MAAzC,EAAiD;;yBACxC,SAAQX,MAAR,CAAe,gCAAf;;;sBAEHuD,MAAM,IAAIC,MAAJ,CAAWF,IAAX,CAAZ;0BACQ,eAAcjD,KAAd,EAAqB;yBACtBgD,gBAAgBI,GAAhB,CAAoB;iDAAaC,KAAb,EAAqBH,GAArB;qBAApB;mBADC,CAAR;;;;;;;;;;;oBAIEV,OAAJ,EAAa;0BACH,eAAcxC,KAAd,EAAqB;uCACRwC;mBADb,CAAR;;;oBAKER,IAAJ,EAAU;0BACA,eAAchC,KAAd,EAAqB;6BAClB;kCACK;8BACJ;gCACE,IAAIsD,IAAJ,CAAStB,IAAT,EAAe,CAAf,EAAkB,CAAlB,CADF;+BAEC,IAAIsB,IAAJ,CAAStB,OAAO,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB;;;;mBALL,CAAR;;;;uBAYqB,SAAQd,GAAR,CAAY,0HACnBlB,KADmB,2HAEpB,EAAEA,YAAF,EAASE,UAAT,EAAeD,YAAf,EAFoB,EAAZ;;;;kDAId,SAAQP,OAAR,CAAgB;8BACTI,OAAO,CAAP,CADS;wBAEfA,OAAO,CAAP;iBAFD;;;;;kDAKA,SAAQH,MAAR;;;;;;;;;;;;;;;;;;;EA1KgCR;;AA+KtC,IAAMoE,eAAe,SAAfA,YAAe;SAAMhE,iCAAcF,QAAd,EAAwB8B,oBAAxB,EAA8C3B,EAA9C,CAAN;CAArB;AACP,AAIO,IAAMgE;0DAAuB;;;;;8CAClC,aAAY,UAAC9D,OAAD,EAAUC,MAAV;qBAAqB4D;wEAAa,kBAAM3D,GAAN;;;;;;6BAAA,GAChC,SAANwD,GAAM,GAAY;;gCAClB,KAAKtB,OAAT,EAAkB;mCACXA,OAAL,CAAa2B,OAAb,CAAqB,UAAUX,MAAV,EAAkB;;oCACjCA,OAAOY,SAAX,EAAsB;qCACjBZ,OAAON,OAAZ,EAAqB;0CACXM,OAAOL,MAAP,GAAgB,IADL;yCAEZ,CAFY;+CAGNK,OAAOJ;iCAHtB;+BAFF;;2BAHwC;;gCAAA,GAa7B,SAATiB,MAAS,CAAUC,GAAV,EAAeC,MAAf,EAAuB;;gCAChCpB,SAAS,CAAb;gCAAgBlC,QAAQ,CAAxB;gCAA2BuD,cAAc,CAAzC,CADoC;mCAE7BL,OAAP,CAAe,eAAO;wCACVM,IAAItB,MAAd;uCACSsB,IAAIxD,KAAb;4CACcyD,KAAKC,GAAL,CAASH,WAAT,EAAsB,CAACC,IAAID,WAA3B,CAAd;6BAHF;;mCAMO;sCACGrB,MADH;qCAEElC,KAFF;2CAGQuD,WAHR,EAAP;2BArB0C;;;;iCA6BpClE,IAAIsE,SAAJ,CAAcd,GAAd,EAAmBO,MAAnB,EAA2B;iCAC1B;uCACMvC;;2BAFP,CA7BoC;;;;;;;;;;;;;;;;;;;iBAAb;;;;;kBAArB;aAAZ,CADkC;;;;;;;;GAAvB;;;;;GAAN;;AAyCP,AAAO,IAAM+C;0DAAoB;;;;;+CAC/B,aAAY,UAACzE,OAAD,EAAUC,MAAV,EAAqB;;wEAClB,mBAAMC,GAAN;;;;;;6BAAA,GACC,SAANwD,GAAM,GAAY;;gCAClB,KAAKtB,OAAT,EAAkB;mCACXA,OAAL,CAAa2B,OAAb,CAAqB,UAAUX,MAAV,EAAkB;;oCACjCA,OAAOY,SAAX,EAAsB;qCACjBZ,OAAOJ,IAAP,CAAY0B,OAAZ,KAAwB,IAA7B,EAAmC;0CACzBtB,OAAOL,MAAP,GAAgB,IADS;yCAE1B,CAF0B;+CAGpBK,OAAOJ;iCAHtB;+BAFF;;2BAHO;;gCAAA,GAaI,SAATiB,MAAS,CAAUC,GAAV,EAAeC,MAAf,EAAuB;;gCAChCpB,SAAS,CAAb;gCAAgBlC,QAAQ,CAAxB;gCAA2BuD,cAAc,CAAzC,CADoC;mCAE7BL,OAAP,CAAe,UAACM,GAAD,EAAS;wCACZA,IAAItB,MAAd;uCACSsB,IAAIxD,KAAb;4CACcyD,KAAKC,GAAL,CAASH,WAAT,EAAsB,CAACC,IAAID,WAA3B,CAAd;6BAHF;;mCAMO;sCACGrB,MADH;qCAEElC,KAFF;2CAGQuD,WAHR,EAAP;2BArBS;;;;iCA4BHlE,IAAIsE,SAAJ,CAAcd,GAAd,EAAmBO,MAAnB,EAA2B;iCAC1B;uCACMtC;;2BAFP,CA5BG;;;;;;;;;;;;;;;;;;;iBAAb;;;;;;aADF,CAD+B;;;;;;;;GAApB;;;;;GAAN;;AA0CP,AAgBO,IAAMgD;0DAAgB;uEAAoE,EAApE;;QAASpB,IAAT,UAASA,IAAT;QAAejB,IAAf,UAAeA,IAAf;QAAqBQ,OAArB,UAAqBA,OAArB;QAA8B8B,WAA9B,UAA8BA,WAA9B;6BAA2CpE,IAA3C;QAA2CA,IAA3C,+BAAkD,CAAlD;8BAAqDD,KAArD;QAAqDA,KAArD,gCAA6D,EAA7D;;;;;;;;uBAChBsE,QAAQC,IAAR,CAAa,6BAAb,CAAX;qBAD2B,GAEX,EAAEC,YAAY,IAAd,EAFW;;gBAGvBxB,IAAJ,EAAU;iBAAA,GACI,IAAIE,MAAJ,CAAWF,IAAX,CADJ;;0BAEI,eAAclC,SAAd,EAAyB;qBAC9B,CAAC,EAAEgB,MAAMmB,GAAR,EAAD,EAAgB,EAAEwB,OAAOxB,GAAT,EAAhB;eADK,CAAZ;;gBAIEV,OAAJ,EAAa;0BACC,eAAczB,SAAd,EAAyB;mCAChByB;eADT,CAAZ;;;gBAKER,IAAJ,EAAU;qBACD2C,SAAS3C,IAAT,EAAe,EAAf,CAAP,CADQ;0BAEI,eAAcjB,SAAd,EAAyB;yBAC1B;8BACK;0BACJ;4BACE,IAAIuC,IAAJ,CAAStB,IAAT,EAAe,CAAf,EAAkB,CAAlB,CADF;2BAEC,IAAIsB,IAAJ,CAAStB,OAAO,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB;;;;eALD,CAAZ;;;8BAYsB4C,cA7BG;gBAAA,mBA6BnBzE,IA7BmB;iBAAA,mBA6BbI,KA7Ba;;;mBA+BJW,IAAI,CAACX,MAAMQ,SAAN,CAAD,EAAmBZ,KAAKY,SAAL,CAAnB,CAAJ,CA/BI;;;kBAAA;;oBAgCjBhB,GAAR,CAAY,gBAAZ,EAA8BD,MAA9B;+CACO,SAAQJ,OAAR,CAAgB;0BACTI,OAAO,CAAP,CADS;oBAEfA,OAAO,CAAP;aAFD,CAjCkB;;;;;+CAsClB,SAAQH,MAAR,eAtCkB;;;;;;;;GAAhB;;;;;GAAN;;;;;AA6CP,AAAO,IAAMkF;0DAAqB,mBAAMC,YAAN;;;;;+CAChC,aAAY,UAACpF,OAAD,EAAUC,MAAV,EAAqB;;wEAClB,mBAAMC,GAAN;;;;;;;;iCAESA,IAAIa,OAAJ,CAAY,EAAE,iBAAiBqE,YAAnB,EAAZ,CAFT;;;6BAAA;;kCAGDC,GAAR;;;;;;;;;;;;;;;;iBAHJ;;;;;;aADF,CADgC;;;;;;;;GAArB;;;;;GAAN;;AAYP,AAeO,IAAMrE;0DAAS,mBAAMF,GAAN;;;;;+CACpB,aAAY,UAACd,OAAD,EAAUC,MAAV;qBAAqB4D;wEAAa,mBAAM3D,GAAN;;;;;;;iCAE5BA,IAAIc,MAAJ,CAAW,EAAEF,QAAF,EAAX,CAF4B;;;;iCAAA;;;;;;;;;;;;;;;;iBAAb;;;;;kBAArB;aAAZ,CADoB;;;;;;;;GAAT;;;;;GAAN;;"}